!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
begin	mpi_poisson.cpp	/^struct timeval begin;$/;"	v	typeref:struct:timeval
begin	serial_poisson.cpp	/^struct timeval begin;$/;"	v	typeref:struct:timeval
cartesian_grid	mpi_poisson.cpp	/^MPI_Comm cartesian_grid;$/;"	v
cg_eps	mpi_poisson.cpp	/^double cg_eps;$/;"	v
cg_max_iterations	mpi_poisson.cpp	/^size_t cg_max_iterations;$/;"	v
checkAndReadArguments	mpi_poisson.cpp	/^bool checkAndReadArguments(int argc, char* argv[])$/;"	f
col_type	mpi_poisson.cpp	/^MPI_Datatype col_type;$/;"	v
end	mpi_poisson.cpp	/^struct timeval end;$/;"	v	typeref:struct:timeval
end	serial_poisson.cpp	/^struct timeval end;$/;"	v	typeref:struct:timeval
eval_init_func	mpi_poisson.cpp	/^double eval_init_func(double x, double y)$/;"	f
eval_init_func	serial_poisson.cpp	/^double eval_init_func(double x, double y)$/;"	f
g_copy	mpi_poisson.cpp	/^void g_copy(double* dest, double* src)$/;"	f
g_copy	serial_poisson.cpp	/^void g_copy(double* dest, double* src)$/;"	f
g_dot_product	mpi_poisson.cpp	/^double g_dot_product(double* grid1, double* grid2)$/;"	f
g_dot_product	serial_poisson.cpp	/^double g_dot_product(double* grid1, double* grid2)$/;"	f
g_product_operator	mpi_poisson.cpp	/^void g_product_operator(double* grid, double* result)$/;"	f
g_product_operator	serial_poisson.cpp	/^void g_product_operator(double* grid, double* result)$/;"	f
g_scale	mpi_poisson.cpp	/^void g_scale(double* grid, double scalar)$/;"	f
g_scale	serial_poisson.cpp	/^void g_scale(double* grid, double scalar)$/;"	f
g_scale_add	mpi_poisson.cpp	/^void g_scale_add(double* dest, double* src, double scalar)$/;"	f
g_scale_add	serial_poisson.cpp	/^void g_scale_add(double* dest, double* src, double scalar)$/;"	f
grid_points_1d	mpi_poisson.cpp	/^std::size_t grid_points_1d = 0;$/;"	v
grid_points_1d	serial_poisson.cpp	/^std::size_t grid_points_1d = 0;$/;"	v
gridpoints_subgrid_x	mpi_poisson.cpp	/^int gridpoints_subgrid_x;$/;"	v
gridpoints_subgrid_y	mpi_poisson.cpp	/^int gridpoints_subgrid_y;$/;"	v
initNeighbours	mpi_poisson.cpp	/^void initNeighbours()$/;"	f
init_b	mpi_poisson.cpp	/^void init_b(double* b)$/;"	f
init_b	serial_poisson.cpp	/^void init_b(double* b)$/;"	f
init_grid	mpi_poisson.cpp	/^void init_grid(double* grid)$/;"	f
init_grid	serial_poisson.cpp	/^void init_grid(double* grid)$/;"	f
initialize_req	mpi_poisson.cpp	/^void initialize_req()$/;"	f
main	mpi_poisson.cpp	/^int main(int argc, char* argv[])$/;"	f
main	serial_poisson.cpp	/^int main(int argc, char* argv[])$/;"	f
my_coords	mpi_poisson.cpp	/^int my_coords[2];$/;"	v
myfile	mpi_poisson.cpp	/^std::ofstream myfile;$/;"	v
myfile	serial_poisson.cpp	/^std::ofstream myfile;$/;"	v
nb_bottom	mpi_poisson.cpp	/^int nb_left, nb_right, nb_top, nb_bottom;$/;"	v
nb_left	mpi_poisson.cpp	/^int nb_left, nb_right, nb_top, nb_bottom;$/;"	v
nb_right	mpi_poisson.cpp	/^int nb_left, nb_right, nb_top, nb_bottom;$/;"	v
nb_top	mpi_poisson.cpp	/^int nb_left, nb_right, nb_top, nb_bottom;$/;"	v
rank	mpi_poisson.cpp	/^int rank;$/;"	v
recvBottom	mpi_poisson.cpp	42;"	d	file:
recvLeft	mpi_poisson.cpp	39;"	d	file:
recvRight	mpi_poisson.cpp	40;"	d	file:
recvTop	mpi_poisson.cpp	41;"	d	file:
request_arr	mpi_poisson.cpp	/^MPI_Request request_arr[8];$/;"	v
row_type	mpi_poisson.cpp	/^MPI_Datatype row_type;$/;"	v
sendBottom	mpi_poisson.cpp	38;"	d	file:
sendLeft	mpi_poisson.cpp	35;"	d	file:
sendRight	mpi_poisson.cpp	36;"	d	file:
sendTop	mpi_poisson.cpp	37;"	d	file:
setupMPIStuff	mpi_poisson.cpp	/^void setupMPIStuff()$/;"	f
size	mpi_poisson.cpp	/^int size;$/;"	v
solve	mpi_poisson.cpp	/^void solve(double* grid, double* b, std::size_t cg_max_iterations, double cg_eps)$/;"	f
solve	serial_poisson.cpp	/^std::size_t solve(double* grid, double* b, std::size_t cg_max_iterations, double cg_eps)$/;"	f
store_grid	mpi_poisson.cpp	/^void store_grid(double* grid, std::string filename)$/;"	f
store_grid	serial_poisson.cpp	/^void store_grid(double* grid, std::string filename)$/;"	f
tearDownMPIStuff	mpi_poisson.cpp	/^void tearDownMPIStuff()$/;"	f
timer_start	mpi_poisson.cpp	/^void timer_start()$/;"	f
timer_start	serial_poisson.cpp	/^void timer_start()$/;"	f
timer_stop	mpi_poisson.cpp	/^double timer_stop()$/;"	f
timer_stop	serial_poisson.cpp	/^double timer_stop()$/;"	f
topology_size_x	mpi_poisson.cpp	/^int topology_size_x, topology_size_y;$/;"	v
topology_size_y	mpi_poisson.cpp	/^int topology_size_x, topology_size_y;$/;"	v
